# syntax=docker.io/docker/dockerfile:1

FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Declare ARGs in the builder stage
ARG NODE_ENV
ARG DAPR_HTTP_PORT
ARG DAPR_GRPC_PORT
ARG CONNECTION_STATESTORE_COMPONENTNAME
ARG CONNECTION_DAPRSECRETS_COMPONENTNAME
ARG CONNECTION_POSTGRESQL_HOST
ARG CONNECTION_POSTGRESQL_PORT
ARG CONNECTION_POSTGRESQL_USERNAME
ARG CONNECTION_POSTGRESQL_PASSWORD
ARG CONNECTION_POSTGRESQL_DATABASE

# Set ENV variables for the builder stage
ENV NODE_ENV=$NODE_ENV
ENV DAPR_HTTP_PORT=$DAPR_HTTP_PORT
ENV DAPR_GRPC_PORT=$DAPR_GRPC_PORT
ENV CONNECTION_STATESTORE_COMPONENTNAME=$CONNECTION_STATESTORE_COMPONENTNAME
ENV CONNECTION_DAPRSECRETS_COMPONENTNAME=$CONNECTION_DAPRSECRETS_COMPONENTNAME
ENV CONNECTION_POSTGRESQL_HOST=$CONNECTION_POSTGRESQL_HOST
ENV CONNECTION_POSTGRESQL_PORT=$CONNECTION_POSTGRESQL_PORT
ENV CONNECTION_POSTGRESQL_USERNAME=$CONNECTION_POSTGRESQL_USERNAME
ENV CONNECTION_POSTGRESQL_PASSWORD=$CONNECTION_POSTGRESQL_PASSWORD
ENV CONNECTION_POSTGRESQL_DATABASE=$CONNECTION_POSTGRESQL_DATABASE

RUN echo "NODE_ENV=$NODE_ENV" && \
    echo "DAPR_HTTP_PORT=$DAPR_HTTP_PORT" && \
    echo "DAPR_GRPC_PORT=$DAPR_GRPC_PORT" && \
    echo "CONNECTION_STATESTORE_COMPONENTNAME=$CONNECTION_STATESTORE_COMPONENTNAME" && \
    echo "CONNECTION_DAPRSECRETS_COMPONENTNAME=$CONNECTION_DAPRSECRETS_COMPONENTNAME" && \
    echo "CONNECTION_POSTGRESQL_HOST=$CONNECTION_POSTGRESQL_HOST" && \
    echo "CONNECTION_POSTGRESQL_PORT=$CONNECTION_POSTGRESQL_PORT" && \
    echo "CONNECTION_POSTGRESQL_USERNAME=$CONNECTION_POSTGRESQL_USERNAME" && \
    echo "CONNECTION_POSTGRESQL_PASSWORD=$CONNECTION_POSTGRESQL_PASSWORD" && \
    echo "CONNECTION_POSTGRESQL_DATABASE=$CONNECTION_POSTGRESQL_DATABASE"

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

# Declare ARGs in the runner stage
ARG NODE_ENV
ARG DAPR_HTTP_PORT
ARG DAPR_GRPC_PORT
ARG CONNECTION_STATESTORE_COMPONENTNAME
ARG CONNECTION_DAPRSECRETS_COMPONENTNAME
ARG CONNECTION_POSTGRESQL_HOST
ARG CONNECTION_POSTGRESQL_PORT
ARG CONNECTION_POSTGRESQL_USERNAME
ARG CONNECTION_POSTGRESQL_PASSWORD
ARG CONNECTION_POSTGRESQL_DATABASE

# Set ENV variables for the runner stage
ENV NODE_ENV=$NODE_ENV
ENV DAPR_HTTP_PORT=$DAPR_HTTP_PORT
ENV DAPR_GRPC_PORT=$DAPR_GRPC_PORT
ENV CONNECTION_STATESTORE_COMPONENTNAME=$CONNECTION_STATESTORE_COMPONENTNAME
ENV CONNECTION_DAPRSECRETS_COMPONENTNAME=$CONNECTION_DAPRSECRETS_COMPONENTNAME
ENV CONNECTION_POSTGRESQL_HOST=$CONNECTION_POSTGRESQL_HOST
ENV CONNECTION_POSTGRESQL_PORT=$CONNECTION_POSTGRESQL_PORT
ENV CONNECTION_POSTGRESQL_USERNAME=$CONNECTION_POSTGRESQL_USERNAME
ENV CONNECTION_POSTGRESQL_PASSWORD=$CONNECTION_POSTGRESQL_PASSWORD
ENV CONNECTION_POSTGRESQL_DATABASE=$CONNECTION_POSTGRESQL_DATABASE

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
CMD ["node", "server.js"]
