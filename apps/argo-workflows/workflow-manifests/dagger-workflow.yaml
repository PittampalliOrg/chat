apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: dagger-in-argo-          # let Argo make a fresh name each time
  namespace: argo
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
spec:
  entrypoint: dagger-workflow
  volumes:
    - name: dagger-socket
      emptyDir: {}
    - name: dagger-storage
      emptyDir: {}
  templates:
    - name: dagger-workflow
      sidecars:
        - name: dagger-engine
          image: registry.dagger.io/engine:v0.18.8
          securityContext: {privileged: true}
          readinessProbe: {exec: {command: ["dagger","core","version"]}}
          volumeMounts:
            - {mountPath: /run/dagger, name: dagger-socket}
            - {mountPath: /var/lib/dagger, name: dagger-storage}
      inputs:
        artifacts:
          - name: project-source
            path: /work
            git: {repo: https://github.com/kpenfound/greetings-api.git, revision: main}
          - name: dagger-cli
            path: /usr/local/bin
            mode: 0755
            http: {url: https://github.com/dagger/dagger/releases/download/v0.18.6/dagger_v0.18.6_linux_amd64.tar.gz}
      container:
        image: alpine:latest
        workingDir: /work
        command: ["sh","-c"]
        args: ["dagger -m github.com/kpenfound/dagger-modules/golang@v0.2.0 call test --source=."]
        env:
          - {name: _EXPERIMENTAL_DAGGER_RUNNER_HOST, value: unix:///run/dagger/engine.sock}
          # - name: DAGGER_CLOUD_TOKEN   # uncomment if you add the Secret
          #   valueFrom: {secretKeyRef: {name: dagger-cloud, key: token}}
        volumeMounts:
          - {mountPath: /run/dagger, name: dagger-socket}
