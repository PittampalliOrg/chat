version: v2beta1
name: chat

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      VERSION=$(cat .version 2>/dev/null || echo "0.1.0")
      GIT_TAG_OR_HASH=$(git describe --always)
      build_images --all -t $VERSION -t $GIT_TAG_OR_HASH -t latest    # 3. Build, tag and push all images
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"

  build: |-
    # Get version from .version file or use default
    VERSION=$(cat .version 2>/dev/null || echo "0.1.0")
    GIT_TAG_OR_HASH=$(git describe --always)
    build_images app -t $VERSION -t $GIT_TAG_OR_HASH
    echo "Built image with tags: $VERSION and $GIT_TAG_OR_HASH"
  
  build-patch: |-
    # Bump patch version and build
    NEW_VERSION=$(./scripts/bump-version.sh patch)
    GIT_TAG_OR_HASH=$(git describe --always)
    build_images app -t $NEW_VERSION -t $GIT_TAG_OR_HASH -t latest
    echo "Built image with tags: $NEW_VERSION, $GIT_TAG_OR_HASH, and latest"
  
  build-minor: |-
    # Bump minor version and build
    NEW_VERSION=$(./scripts/bump-version.sh minor)
    GIT_TAG_OR_HASH=$(git describe --always)
    build_images app -t $NEW_VERSION -t $GIT_TAG_OR_HASH -t latest
    echo "Built image with tags: $NEW_VERSION, $GIT_TAG_OR_HASH, and latest"
  
  build-major: |-
    # Bump major version and build
    NEW_VERSION=$(./scripts/bump-version.sh major)
    GIT_TAG_OR_HASH=$(git describe --always)
    build_images app -t $NEW_VERSION -t $GIT_TAG_OR_HASH -t latest
    echo "Built image with tags: $NEW_VERSION, $GIT_TAG_OR_HASH, and latest"

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app:
    image: vpittamp.azurecr.io/chat-frontend
    buildKit: {}
    dockerfile: ./Dockerfile
    buildArgs:
      NEXT_PUBLIC_BASE_PATH: "http://chat.localtest.me"
      NEXT_PUBLIC_BASE_URL: "http://chat.localtest.me"
      NEXT_PUBLIC_SITE_URL: "http://chat.localtest.me"
      POSTGRES_URL: "postgresql://neon:npg@postgres-service.nextjs.svc.cluster.local:5432/neondb?sslmode=require"
      REDIS_URL: "redis://redis-service:6379"
      NODE_ENV: "production"
# This is a list of `deployments` that DevSpace can create for this project
# deployments:
#   app:
#     # This deployment uses `kubectl` but you can also define `helm` deployments
#     kubectl:
#       manifests:
        # - ./resources/nextjs/base/**
        # - ./resources/infra-secrets/base/**
        # - ./resources/postgres/base/**
        # - ./resources/redis/base/**

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    # Search for the container that runs this image
    imageSelector: vpittamp.azurecr.io/chat-frontend
    # Specify the container name to target
    container: nextjs
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: vpittamp.azurecr.io/kind:2
    # Set the working directory
    workingDir: /workspace
    # Increase memory for development
    resources:
      limits:
        memory: 4Gi
        cpu: "2"
      requests:
        memory: 2Gi
        cpu: "500m"
    
    # Sync files between the local filesystem and the development container
    sync:
      - path: .:/workspace
        excludePaths:
          - .devcontainer/
          - .devspace/
          - .git/
          - .vscode/
          - node_modules/
          - .next/
          - .pnpm-store/
          - .github/
          - .postgresql/
          - apps/
          - bootstrap/
          - dapr/
          - deployments/
          - iac/
          - kind-pki/
          - resources/
          - scripts/
          - .env*
      - path: ./devspace_start.sh:/workspace/devspace_start.sh
        file: true

    # Open a terminal and use the following command to start it
    terminal:
      command: sh
      workDir: /workspace
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
      localHostname: my-app.devspace

    # Make the following commands from my local machine available inside the dev container
    # Disabled proxy commands due to permission issues
    proxyCommands:
      - gitCredentials: true
      # - command: devspace
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "3000:3000"
        bindAddress: 0.0.0.0
      - port: "9229"           # Node.js debugger port
    
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://chat.localtest.me:3000
    
    # Environment variables for development
    # DevSpace will inherit all env vars from ConfigMaps and Secrets
    # Only override what's absolutely necessary for local development
    # env:
    #   - name: NEXT_PUBLIC_BASE_PATH
    #     value: ""  # Override the invalid base path from configmap
    #   - name: HOSTNAME
    #     value: "0.0.0.0"  # Ensure app listens on all interfaces
# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  migrate-db:
    command: |-
      echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
      echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)